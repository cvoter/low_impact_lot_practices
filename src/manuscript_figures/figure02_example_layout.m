%figure02_example_layout.m
%Carolyn Voter
%May 26, 2018

% Generates Figure 2 from paper on low impact parcel features that is in
% revision at WRR (as of June 2018). Figure 2 outlines impervious surfaces
% for the "lowest-impact" lot (all 5 low-impact features applied) and shows
% elevations used in microtopography scenarios via heatmap.

% Requires:
% 'data/model_inputs/Lot1111_SiL_average/domainInfo.mat'
%      domain info for lowest impact lot (all 5 low-impact features applied)
%      incl. elevation

% 'data/colormaps/map_ylgrbu.mat'
%      colorblind-friendly colormap for elevation heatmap.

close all; clear all; clc;
set(0,'defaultTextFontSize',20,'defaultTextFontName','Segoe UI Semilight',...
    'defaultAxesFontSize',20,'defaultAxesFontName','Segoe UI Semilight')

%% LOAD DOMAIN INFO
% All measurements (incl. elevation) are in meters
% Parcel cover (parcelCover) key:
%     0=turfgrass, 1=street, 2=alley, 3=parking lot, 4=sidewalk, 5=driveway
%     6=frontwalk, 7=house, 8=house2 (only neede for LgSub2), 9=garage
% Feature coordinates (fc) key:
%     row numbers correspond to parcelCover key (i.e., row 1 = street coords)
%     column 1: x lower
%     column 2: x upper
%     column 3: y lower
%     column 4: y upper

% load('../../data/model_inputs/Lot1111_SiL_average/domainInfo.mat');
load('../../data/model_inputs/Lot0000_SiL10c_average/domainInfo.mat');
% load('../../data/model_inputs/LotVacant_average/domainInfo.mat');
xL = x(1)-dx/2; xU = x(end)+dx/2;
yL = y(1)-dy/2; yU = y(end)+dy/2;

%% DEFINE IMPERVIOUS PATCHES
% Define edges of impervious surfaces, to draw on plot. Requires several
% irregular polygons (patches) and lines to capture all features.
patch01 = [fc(4,1),fc(4,3);...
    fc(4,1),fc(4,4);... 
    fc(6,1),fc(4,4);...
    fc(6,1),fc(7,3);...
%     fc(7,1)+2*dx,fc(7,3);...
%     fc(7,1)+2*dx,fc(7,3)-3*dy;...
%     fc(7,1)+dx,fc(7,3)-3*dy;...
%     fc(7,1)+dx,fc(7,3);...
    fc(7,1),fc(7,3);...
    fc(7,1),fc(8,4)-3*dy;...
    0,fc(8,4)-3*dy;...
    0,fc(8,4)-2*dy;...
    fc(7,1),fc(8,4)-2*dy;...
    fc(8,1),fc(8,4);...
%     fc(8,1)+dx,fc(8,4);...
%     fc(8,1)+dx,fc(8,4)+3*dy;...
%     fc(8,1)+2*dx,fc(8,4)+3*dy;...
%     fc(8,1)+2*dx,fc(8,4);...
%     fc(8,2)-2*dx,fc(8,4);...
%     fc(8,2)-2*dx,fc(8,4)+3*dy;...
%     fc(8,2)-dx,fc(8,4)+3*dy;...
%     fc(8,2)-dx,fc(8,4);...
    fc(8,2),fc(8,4);...
    fc(5,2),fc(4,4);...
    fc(4,2),fc(4,4);...
    fc(4,2),fc(4,3);...
    fc(5,2),fc(4,3);...
    fc(5,2),fc(5,3);...
    fc(5,1),fc(5,3);...
    fc(5,1),fc(4,3)];
patch02 = [fc(6,2),fc(4,4);...
    fc(6,2),fc(7,3);...
%     fc(5,1)-2*dx,fc(7,3);...
%     fc(5,1)-2*dx,fc(7,3)-3*dy;...
%     fc(5,1)-dx,fc(7,3)-3*dy;...
%     fc(5,1)-dx,fc(7,3);...
    fc(5,1),fc(7,3);...
    fc(5,1),fc(4,4)];
line01 = [fc(5,1),fc(7,3);...
    fc(5,1),fc(5,4);...
    fc(5,2),fc(5,4)];
line02 = [fc(9,1),fc(9,3);...
    fc(9,1),fc(9,4);...
    fc(9,2),fc(9,4)];

%% PLOT
% Load colormap for elevation heat map
load('..\..\data\colormaps\map_ylgrbu.mat');

% Plot only pervious elevations
elevPlot = elev.*NaNimp(:,:,100);

% pcolor does not plot last row or column; trick it here for display
xP = [x,x(nx)+dx];
yP = [y,y(ny)+dy];
[XP,YP] = meshgrid(xP,yP);
coverP = [parcelCover,parcelCover(:,nx);parcelCover(ny,:),parcelCover(ny,nx)];
elevP = [elevPlot,elevPlot(:,nx);elevPlot(ny,:),elevPlot(ny,nx)];

% Generate figure
figure(1)
hold on
axis equal
axis([xL-2 xU+2 yL-2 yU+2])
h = pcolor(XP-0.25,YP-0.25,elevP);
patch('XData',patch01(:,1),'YData',patch01(:,2),'FaceColor','none',...
    'EdgeColor','k','LineStyle','-','LineWidth',0.5);
patch('XData',patch02(:,1),'YData',patch02(:,2),'FaceColor','none',...
    'EdgeColor','k','LineStyle','-','LineWidth',0.5);
plot(line01(:,1),line01(:,2),'Color','k','LineStyle','-','LineWidth',0.5);
plot(line02(:,1),line02(:,2),'Color','k','LineStyle',':','LineWidth',0.5);
set(h,'EdgeColor','none')
colormap(mycmap); caxis([0 0.65])
hcb = colorbar;
ylabel(hcb,'Elevation (m)','FontSize',11);
rectangle('Position',[xL,yL,(xU-xL),(yU-yL)],'EdgeColor','k','LineStyle',...
    '-','LineWidth',1.5);xlabel('Distance (m)')
ylabel('Distance (m)')
hold off
set(gcf,'renderer','Painters')